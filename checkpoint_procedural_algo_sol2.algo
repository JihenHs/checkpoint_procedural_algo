FUNCTION read_length(VAR n:INTEGER) : INTEGER
VAR
    
BEGIN
    REPEAT
        WRITE("saisir longeur du tableau");
        read(n);
    UNTIL (n<=0);
    RETURN n ;
END
///
PROCEDURE remplir_vect(VAR vect1: ARRAY_OF FLOAT ,VAR vect2: ARRAY_OF FLOAT,n:INTEGER)
VAR
    i:INTEGER:=0
BEGIN
    FOR i FROM 0 TO n-1   DO
        read(vect1[i]);
        read(vect2[i]);
    END_FOR
END
///

FUNCTION Dot_product(vect1: ARRAY_OF FLOAT, vect2: ARRAY_OF FLOAT, n:INTEGER):INTEGER
VAR
    prod:FLOAT
    i : INTEGER :=0;
BEGIN
    FOR i FROM 0 TO n-1 STEP 1  DO

        prod:= prod+ vect1[i]+vect2[i]
    END_FOR
    END_FOR
    return prod;
END
///
PROCEDURE result(produit: FLOAT)
VAR
BEGIN
IF (produit = 0) THEN
    WRITE("les deux vecteurs sont orthogonaux")
    ELSE 
    WRITE("les deux vecteurs ne sont  pas orthogonaux")

END_IF
END
///
ALGORITHM algorithm_name
VAR 
    Lg: INTEGER;
    TAB1,TAB2 : ARRAY_OF FLOAT[100];
    dot_prod: FLOAT;
BEGIN
    //read the length 
    Lg:=read_length();
    // read the tabs
    remplir_vect(TAB1,TAB2,Lg);
    //calculate the dot product
    dot_prod:= Dot_product(tab1,tab2,n)
    //display the final result
    result(dot_prod);

END